{
	"info": {
		"_postman_id": "teamfinder-api-collection",
		"name": "TeamFinder API",
		"description": "Complete API collection for TeamFinder platform",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "teamfinder"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Auto-set base URL",
					"pm.request.url.host = pm.environment.get('base_url') || 'localhost:8090';"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "localhost:8090",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if the backend service is healthy"
			},
			"response": []
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    console.log('✅ Tokens saved automatically');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    console.log('✅ Tokens saved automatically');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    console.log('✅ Tokens refreshed automatically');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/check",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Email Code",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"verify@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login/email",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    console.log('✅ Tokens saved automatically');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"verify@example.com\",\n    \"code\": \"123456\",\n    \"username\": \"emailuser\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/verify/email",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"verify",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Telegram Auth URL",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/login/telegram",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login",
								"telegram"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Telegram Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('access_token', response.access_token);",
									"    pm.environment.set('refresh_token', response.refresh_token);",
									"    console.log('✅ Tokens saved automatically');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"123456789\",\n    \"username\": \"testuser\",\n    \"first_name\": \"Test\",\n    \"auth_date\": \"1640995200\",\n    \"hash\": \"mock_hash_for_testing\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/verify/telegram",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"verify",
								"telegram"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"account"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hackathons",
			"item": [
				{
					"name": "Get All Hackathons",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/hackathons",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"hackathons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Hackathon by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/hackathons/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"hackathons",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hackathon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('hackathon_id', response.id);",
									"    console.log('✅ Hackathon ID saved: ' + response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Hackathon 2024\",\n    \"description\": \"A test hackathon for API testing\",\n    \"start_date\": \"2024-03-01T10:00:00Z\",\n    \"end_date\": \"2024-03-03T18:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/hackathons",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"hackathons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Hackathon",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Test Hackathon 2024\",\n    \"description\": \"Updated description for the hackathon\",\n    \"start_date\": \"2024-03-01T10:00:00Z\",\n    \"end_date\": \"2024-03-03T18:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/hackathons/{{hackathon_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"hackathons",
								"{{hackathon_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Hackathon",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/hackathons/{{hackathon_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"hackathons",
								"{{hackathon_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Get Profiles by Hackathon",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/profiles/hackathon/{{hackathon_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"hackathon",
								"{{hackathon_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('profile_id', response.id);",
									"    console.log('✅ Profile ID saved: ' + response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": {{user_id}},\n    \"name\": \"John\",\n    \"surname\": \"Doe\",\n    \"academic_group\": \"CS-21\",\n    \"telegram_handle\": \"@johndoe\",\n    \"desired_role\": \"Frontend Developer\",\n    \"skills\": [\"React\", \"JavaScript\", \"TypeScript\"],\n    \"about_me\": \"Passionate frontend developer with 2 years of experience\",\n    \"achievements\": [\"Won local hackathon 2023\", \"Open source contributor\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/profiles/hackathon/{{hackathon_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"hackathon",
								"{{hackathon_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/profiles/hackathon/{{hackathon_id}}/profile/{{profile_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"hackathon",
								"{{hackathon_id}}",
								"profile",
								"{{profile_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John\",\n    \"surname\": \"Doe\",\n    \"academic_group\": \"CS-21\",\n    \"telegram_handle\": \"@johndoe_updated\",\n    \"desired_role\": \"Full Stack Developer\",\n    \"skills\": [\"React\", \"JavaScript\", \"TypeScript\", \"Node.js\"],\n    \"about_me\": \"Passionate full stack developer with 2+ years of experience\",\n    \"achievements\": [\"Won local hackathon 2023\", \"Open source contributor\", \"Internship at tech company\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/profiles/hackathon/{{hackathon_id}}/profile/{{profile_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"hackathon",
								"{{hackathon_id}}",
								"profile",
								"{{profile_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/profiles/hackathon/{{hackathon_id}}/profile/{{profile_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"hackathon",
								"{{hackathon_id}}",
								"profile",
								"{{profile_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
} 