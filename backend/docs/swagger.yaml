basePath: /
definitions:
  handlers.AuthResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/handlers.UserProfile'
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        example: Invalid credentials
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  handlers.MessageResponse:
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  handlers.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      username:
        example: johndoe
        type: string
    required:
    - email
    - password
    - username
    type: object
  handlers.UserProfile:
    properties:
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      username:
        example: johndoe
        type: string
    type: object
  server.HealthResponse:
    properties:
      service:
        example: teamfinder-backend
        type: string
      status:
        example: healthy
        type: string
      timestamp:
        example: "2024-01-01T12:00:00Z"
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
host: localhost:8090
info:
  contact:
    email: support@teamfinder-hack.ru
    name: TeamFinder Support
  description: Complete backend API for TeamFinder - a platform for finding hackathon
    teammates
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://teamfinder-hack.ru/terms
  title: TeamFinder API
  version: "1.0"
paths:
  /auth/account:
    delete:
      description: Permanently delete the user account and all associated data
      produces:
      - application/json
      responses:
        "200":
          description: Account deleted successfully
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "401":
          description: Invalid or missing token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to delete account
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user account
      tags:
      - Authentication
  /auth/check:
    get:
      description: Check if the provided JWT token is valid
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            properties:
              email:
                type: string
              message:
                type: string
              user_id:
                type: integer
              valid:
                type: boolean
            type: object
        "401":
          description: Invalid or missing token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Validate token
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Logout user (client should remove tokens)
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "401":
          description: Invalid or missing token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access and refresh tokens using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed successfully
          schema:
            properties:
              access_token:
                type: string
              refresh_token:
                type: string
            type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with username, email and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /health:
    get:
      description: Check if the service is running and healthy
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            $ref: '#/definitions/server.HealthResponse'
      summary: Health check
      tags:
      - System
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
