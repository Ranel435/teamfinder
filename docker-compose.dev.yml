services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c 'max_connections=1000'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - teamfinder_net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - GO_ENV=development
      - BASIC_SERVER_PORT=${BASIC_SERVER_PORT}
      - TG_BOT_TOKEN=${TG_BOT_TOKEN}
      - TG_BOT_ID=${TG_BOT_ID}
      - EMAIL_LOGIN=${EMAIL_LOGIN}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    volumes:
      - ./backend:/app
    command: go run ./cmd/main.go
    depends_on:
      - postgres
    networks:
      - teamfinder_net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: development
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8090
    volumes:
      - ./frontend:/app
    command: npm run dev
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backend
    networks:
      - teamfinder_net

volumes:
  postgres_data:

networks:
  teamfinder_net:
    driver: bridge 